// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  // directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String          @id @default(uuid())
  username         String       @unique @db.VarChar(25)
  password         String       @db.VarChar(255)
  role             Role         @default(CUSTOMER)
  first_name       String?
  last_name        String?
  email               String?              @db.VarChar(255)
  phone_number        String?              @db.VarChar(20)
  address             String?              @db.VarChar(255)
  date_of_birth       DateTime?            @db.Timestamp(6)
  Customer         Customer?
  Dentist          Dentist?
  clinicOwner     ClinicOwner?
  SystemAdmin      SystemAdmin?
  sentMessages     Message[]    @relation("MessageSender")
  receivedMessages Message[]    @relation("MessageReceiver")
}

enum Role {
  CUSTOMER
  DENTIST
  CLINIC_OWNER
  SYSTEM_ADMIN
}

model Customer {
  id                  String               @id @default(uuid())
  user_id             String                  @unique
  appointments        Appointment[]
  periodic_treatments PeriodicTreatment[]
  User                User                 @relation(fields: [user_id], references: [id])
  invoices            Invoice[]
}

model Dentist {
  id                  String               @id @default(uuid())
  user_id             String               @unique
  specialization      String               @db.VarChar(255)
  certificate         String[]             @db.VarChar(255)  // img url
  isApproved          Boolean              @default(false)
  appointments        DentistAppointment[]
  periodic_treatments DentistPeriodicTreatment[]
  User                User                 @relation(fields: [user_id], references: [id])
  clinics             DentistClinic[]
  invoices            Invoice[]
}

model ClinicOwner{
  id                  String               @id @default(uuid())
  user_id             String               @unique
  clinics             Clinic[]
  User                User                 @relation(fields: [user_id], references: [id])
}

model Clinic {
  id                  String               @id @default(uuid())
  clinic_owner_id     String               @unique
  name                String               @db.VarChar(255)
  address             String               @db.VarChar(255)
  city                String               @db.VarChar(255)
  country             String               @db.VarChar(255)
  description         String               @db.VarChar(255)
  email               String               @db.VarChar(255)
  phone_number        String               @db.VarChar(20)
  open_time           Int
  close_time          Int
  time_slot           Int                  // duration in minutes
  imageUrls           String[]             @db.VarChar(255) 
  imagePublicIds      String[]             @db.VarChar(255)  
  latitude            Decimal              @db.Decimal
  longitude           Decimal              @db.Decimal
  max_patients_per_slot Int
  max_treatments_per_slot Int
  appointments        ClinicAppointment[]
  periodic_treatments ClinicPeriodicTreatment[]
  dentists            DentistClinic[]
  invoices            Invoice[]
  discount            ClinicDiscount[]
  clinic_owner        ClinicOwner        @relation(fields: [clinic_owner_id], references: [id])

}

model Appointment {
  id                  String                             @id @default(uuid())
  customer_id         String
  clinic_id           String
  date                DateTime                          @db.Timestamp(6)
  start_time          DateTime                          @db.Time(6)
  total_charge        Float
  status              AppointmentStatus
  Customer            Customer                          @relation(fields: [customer_id], references: [id])
  Dentist             DentistAppointment[]              
  Clinic              ClinicAppointment[]
  Invoice             Invoice?
  discount            Discount[]

}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model PeriodicTreatment {
  id                    String              @id @default(uuid())
  customer_id           String
  dentist_id            String
  clinic_id             String
  discount_id            String
  treatment_type        String               @db.VarChar(255)
  start_date            DateTime             @db.Timestamp(6)
  end_date              DateTime             @db.Timestamp(6)
  frequency             Int                  // frequency in months
  charge_per_periodic   Float
  Customer              Customer             @relation(fields: [customer_id], references: [id])
  Dentist               DentistPeriodicTreatment[]
  Clinic                ClinicPeriodicTreatment[]
  Invoice               Invoice?
  discount              Discount[]
}

model Invoice { 
  id                     String          @id @default(uuid())
  customer_id            String
  dentist_id             String
  clinic_id              String
  discount_id            String
  appointment_id         String?                 @unique
  periodic_treatment_id  String?                 @unique
  total_charge           Float
  payment_status         PaymentStatus
  Customer               Customer             @relation(fields: [customer_id], references: [id])
  Dentist                Dentist              @relation(fields: [dentist_id], references: [id])
  Clinic                 Clinic               @relation(fields: [clinic_id], references: [id])
  Appointment            Appointment?         @relation(fields: [appointment_id], references: [id])
  PeriodicTreatment      PeriodicTreatment?   @relation(fields: [periodic_treatment_id], references: [id])
  discount               Discount[]
}

model Discount {
  id            String          @id @default(uuid())
  code                   String               @unique @db.VarChar(255)
  pertentage             Float               
  start_date             DateTime             @db.Timestamp(6)
  end_date               DateTime             @db.Timestamp(6)
  invoices               Invoice[]
  appointments           Appointment[]
  periodic_treatments    PeriodicTreatment[]
  clinics                ClinicDiscount[]
}


enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

model Message {
  id    String          @id @default(uuid())
  sender_id     String
  receiver_id   String
  content       String               @db.VarChar(255)
  sent_at       DateTime             @default(now()) @db.Timestamp(6)
  Sender        User                 @relation("MessageSender", fields: [sender_id], references: [id])
  Receiver      User                 @relation("MessageReceiver", fields: [receiver_id], references: [id])
}

model SystemAdmin {
  id            String          @id @default(uuid())
  user_id       String                  @unique
  User          User                 @relation(fields: [user_id], references: [id])
}


// many to many relationship
model DentistClinic {
  dentist       Dentist @relation(fields: [dentist_id], references: [id])
  dentist_id    String
  clinic        Clinic  @relation(fields: [clinic_id], references: [id])
  clinic_id     String
  assignedAt    DateTime @default(now())

  @@id([dentist_id, clinic_id])
}

model DentistAppointment {
  dentist       Dentist @relation(fields: [dentist_id], references: [user_id])
  dentist_id    String
  appointment   Appointment @relation(fields: [appointment_id], references: [id])
  appointment_id String
  assignedAt    DateTime @default(now())

  @@id([dentist_id, appointment_id])
}

model DentistPeriodicTreatment {
  dentist       Dentist @relation(fields: [dentist_id], references: [user_id])
  dentist_id    String
  periodic_treatment   PeriodicTreatment @relation(fields: [periodic_treatment_id], references: [id])
  periodic_treatment_id String
  assignedAt    DateTime @default(now())

  @@id([dentist_id, periodic_treatment_id])
}

model ClinicDiscount {
  clinic       Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id    String
  discount     Discount @relation(fields: [discount_id], references: [id])
  discount_id  String
  assignedAt   DateTime @default(now())

  @@id([clinic_id, discount_id])
}

model ClinicAppointment {
  clinic       Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id    String
  appointment  Appointment @relation(fields: [appointment_id], references: [id])
  appointment_id String
  assignedAt   DateTime @default(now())

  @@id([clinic_id, appointment_id])
}

model ClinicPeriodicTreatment {
  clinic       Clinic @relation(fields: [clinic_id], references: [id])
  clinic_id    String
  periodic_treatment   PeriodicTreatment @relation(fields: [periodic_treatment_id], references: [id])
  periodic_treatment_id String
  assignedAt    DateTime @default(now())

  @@id([clinic_id, periodic_treatment_id])
}